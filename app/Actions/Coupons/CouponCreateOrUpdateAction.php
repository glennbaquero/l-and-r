<?php

namespace App\Actions\Coupons;

use Illuminate\Support\Facades\DB;

use App\Models\Coupon;
use App\Models\CouponGeneralRoute;

class CouponCreateOrUpdateAction 
{
	protected $coupon;

	/**
	 * Create new action instance
	 *
	 * @return void
	 */
	
	public function __construct(Coupon $coupon)
	{
		$this->coupon = $coupon;
	}

	/**
	 * Handles creating or updating of Coupon
	 */
	
	public function execute($request, $id = null)
	{
		$request['apply_minimum_price'] = $request->filled('apply_minimum_price');
		$request['daily_restart'] = $request->filled('daily_restart');
		$request['apply_multiroute'] = $request->filled('apply_multiroute');
		$request['apply_by_section'] = $request->filled('apply_by_section');
		$request['coupon_available'] = $request->number_of_coupons;

		DB::beginTransaction();
			if(!$id) {
				if($request->filled('is_autogenerated')) {
					$request['code'] = bin2hex(random_bytes(3));
				}

				$this->coupon = $this->coupon->create($request->except(['route_ids', 'service_ids', 'ticket_type_ids', 'is_autogenerated', 'arrival_id', 'departure_id']));
			} else {
				$request['trip_days'] = $request->trip_filter == 'Day' ? null : $request['trip_days'];

				if($request->trip_filter_day === 'All') {
					$request['trip_days'] = json_encode(array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'));
				}

				$request['purchase_date_filter_day'] = $request->purchase_date_filter == 'Day' ? null : $request['purchase_date_filter_day'];

				if($request->purchase_date_filter_day === 'All') {
					$request['purchase_date_filter_day'] = json_encode(array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'));
				}

				$this->coupon = Coupon::withTrashed()->findOrFail($id);
				$this->coupon->update($request->except(['route_ids', 'service_ids', 'ticket_type_ids', 'arrival_id', 'departure_id']));

				$this->coupon->generalRoutes()->forceDelete();

			}
			$this->coupon->services()->sync(json_decode($request->service_ids));
			$this->coupon->ticketTypes()->sync(json_decode($request->ticket_type_ids));
			$this->coupon->routes()->sync(json_decode($request->route_ids));



			if($request->apply_to == 'General Route' || $request->apply_to == 'Part of Route') {
				foreach (json_decode($request->departure_id) as $departure) {
					CouponGeneralRoute::create([
						'coupon_id' => $this->coupon->id,
						'departure_id' => $departure
					]);
				}

				foreach (json_decode($request->arrival_id) as $arrival) {
					CouponGeneralRoute::create([
						'coupon_id' => $this->coupon->id,
						'arrival_id' => $arrival
					]);
				}
			}

		DB::commit();

		return $this->coupon;
	}
}